// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/xxx-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  phone         String?  @unique
  name          String
  image         String?
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  addresses      UserAddress[]
  orders         Order[]
  cartItems      CartItem[]
  sessions       Session[]
  accounts       Account[]
  subscriptions  Subscription[]
  paymentMethods PaymentMethod[]
  reviews        ProductReview[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserAddress {
  id        String   @id @default(cuid())
  userId    String
  type      String // Home, Work, Other
  name      String
  address   String
  city      String
  state     String?
  pincode   String?
  phone     String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("user_addresses")
}

// Product catalog
model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String
  price         Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  stock         Int      @default(0)
  images        String[] // Array of image URLs
  categoryId    String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category   Category        @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    ProductReview[]

  @@map("products")
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int // 1-5
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("product_reviews")
}

// Shopping cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Orders
model Order {
  id                String      @id @default(cuid())
  userId            String
  status            OrderStatus @default(PENDING)
  totalAmount       Decimal     @db.Decimal(10, 2)
  deliveryFee       Decimal     @default(0) @db.Decimal(10, 2)
  discount          Decimal     @default(0) @db.Decimal(10, 2)
  deliveryAddressId String
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  deliveryAddress UserAddress     @relation(fields: [deliveryAddressId], references: [id])
  items           OrderItem[]
  tracking        OrderTracking[]
  payment         Payment?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderTracking {
  id          String      @id @default(cuid())
  orderId     String
  status      OrderStatus
  location    String?
  description String?
  timestamp   DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

// Payments
model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  paymentMethodId String?
  transactionId   String?
  gateway         String? // razorpay, stripe, etc.
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model PaymentMethod {
  id        String            @id @default(cuid())
  userId    String
  type      PaymentMethodType
  details   Json // Encrypted payment details
  isDefault Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("payment_methods")
}

enum PaymentMethodType {
  UPI
  CARD
  NETBANKING
  WALLET
}

// Subscriptions
model Subscription {
  id          String             @id @default(cuid())
  userId      String
  planType    SubscriptionPlan
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime           @default(now())
  endDate     DateTime?
  nextBilling DateTime?
  amount      Decimal            @db.Decimal(10, 2)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  FAMILY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
}

// Voice transcription logs
model VoiceTranscription {
  id           String   @id @default(cuid())
  userId       String?
  audioUrl     String
  transcript   String
  languageCode String?
  confidence   Float?
  duration     Float?
  createdAt    DateTime @default(now())

  @@map("voice_transcriptions")
}
